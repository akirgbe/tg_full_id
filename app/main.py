import asyncio
import os
import sys

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand, BotCommandScopeDefault

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from app.bot.handlers import start, help, id, get_shared, any_message, database_command, find
from app.bot.middlewares.white_list import WhitelistMiddleware
from app.config import settings
from db import db

from loguru import logger

# –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
logger.remove()

# –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Ü–≤–µ—Ç–∞–º–∏
logger.add(
    sys.stdout,
    level="INFO",
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level}</level> | <cyan>{message}</cyan>",
    colorize=True
)


async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="id", description="–ü–æ–ª—É—á–∏—Ç—å ID"),
        BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"),
        BotCommand(command="remove", description="–£–¥–∞–ª–∏—Ç—å –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞"),
        BotCommand(command="list", description="–ü–æ–∫–∞–∑–∞—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"),
        BotCommand(command="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø"),
        BotCommand(command="find_phone", description="–ù–∞–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
        BotCommand(command="list_persons", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π"),
        BotCommand(command="list_accounts", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"),
        BotCommand(command="add_person", description="–î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞"),
        BotCommand(command="add_account", description="–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
        BotCommand(command="delete_person", description="–£–¥–∞–ª–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞"),
        BotCommand(command="delete_account", description="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"),
    ]

    await bot.set_my_commands(commands=commands, scope=BotCommandScopeDefault())
    logger.success("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    bot = Bot(token=settings.BOT_TOKEN,
              default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    await set_bot_commands(bot)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–¥–ª–≤–∞—Ä—å
    whitelist_middleware = WhitelistMiddleware()
    dp.message.middleware(whitelist_middleware)
    dp.callback_query.middleware(whitelist_middleware)
    dp.edited_message.middleware(whitelist_middleware)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_routers(
        database_command.router,  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
        start.router,
        help.router,
        id.router,
        get_shared.router,
        find.router,
        any_message.router
    )

    # ----------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ -----------------
    logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    logger.info("=" * 50)
    logger.info(f"ü§ñ BOT_TOKEN: {'*' * 10 + settings.BOT_TOKEN[-5:]}")
    logger.info(f"‚≠ê SUPER_ADMIN_ID: {settings.SUPER_ADMIN_ID}")

    all_users = db.get_all_users()
    logger.info(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ: {len(all_users)}")

    if all_users:
        logger.info("–ü–µ—Ä–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:")
        for user in all_users[:10]:
            username_display = user.username or 'N/A'
            logger.info(f"   üë§ {user.user_id} | {username_display}")
        if len(all_users) > 10:
            logger.info(f"   ... –∏ –µ—â—ë {len(all_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    logger.info(f"‚öôÔ∏è  Parse mode: {ParseMode.HTML}")
    logger.info("=" * 50)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
    await bot.delete_webhook(drop_pending_updates=True)
    logger.debug("–°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")

    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
